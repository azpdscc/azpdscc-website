// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Event recommendation AI agent.
 *
 * - eventRecommendations - A function that handles the event recommendation process.
 * - EventRecommendationsInput - The input type for the eventRecommendations function.
 * - EventRecommendationsOutput - The return type for the eventRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EventRecommendationsInputSchema = z.object({
  userPreferences: z
    .array(z.string())
    .optional()
    .describe('A list of user preferences (e.g., Dance, Music, Food).'),
  popularEvents: z.array(z.string()).optional().describe('A list of popular event names.'),
  eventsNearYou: z.array(z.string()).optional().describe('A list of event names near the user.'),
  isLoggedIn: z.boolean().describe('Whether the user is logged in or not.'),
  locationAvailable: z.boolean().describe('Whether the users location is available or not.')
});
export type EventRecommendationsInput = z.infer<typeof EventRecommendationsInputSchema>;

const EventRecommendationsOutputSchema = z.object({
  recommendedEvents: z.array(z.string()).describe('A list of recommended event names.'),
});
export type EventRecommendationsOutput = z.infer<typeof EventRecommendationsOutputSchema>;

export async function eventRecommendations(input: EventRecommendationsInput): Promise<EventRecommendationsOutput> {
  return eventRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'eventRecommendationsPrompt',
  input: {schema: EventRecommendationsInputSchema},
  output: {schema: EventRecommendationsOutputSchema},
  prompt: `You are an AI event recommendation agent.

  Given the user's login status, location availability and preferences, recommend events.

  If the user is logged in and has preferences, recommend events based on those preferences.
  If the user is not logged in, recommend popular events or events near the user if their location is available.

  User is logged in: {{isLoggedIn}}
  User preferences: {{#if userPreferences}}{{{userPreferences}}}{{else}}No preferences provided.{{/if}}
  User location available: {{locationAvailable}}
  Popular events: {{#if popularEvents}}{{{popularEvents}}}{{else}}No popular events.{{/if}}
  Events near you: {{#if eventsNearYou}}{{{eventsNearYou}}}{{else}}No events near you.{{/if}}

  Recommended events:`,
});

const eventRecommendationsFlow = ai.defineFlow(
  {
    name: 'eventRecommendationsFlow',
    inputSchema: EventRecommendationsInputSchema,
    outputSchema: EventRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
